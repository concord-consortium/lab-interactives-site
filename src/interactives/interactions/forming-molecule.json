{
  "title": "Forming a Molecule",
  "publicationStatus": "public",
  "labEnvironment": "production",
  "subtitle": "Forces on molecules as they are brought together.",
  "category": "",
  "subCategory": "",
  "screenshot": "",
  "aspectRatio": 1.33,
  "fontScale": 1,
  "lang": "en-US",
  "i18nMetadata": "",
  "credits": "",
  "helpOnLoad": false,
  "aboutOnLoad": true,
  "about": [
    "Move the atoms closer together and observe how the forces the atoms feel change based on the positions of the atoms. ",
    "Can you find the balance point? What does the distribution of electrons look like when you do? ",
    "Observe what a chemical bond looks like from the perspective of the electron distribution between two atoms.",
    "***",
    "*This simulation was developed by [the Interactions project](https://concord.org/projects/interactions \"the Interactions Project\") ",
    "with funding from the National Science Foundation (DRL-1232388) in partnership with ",
    "[the CREATE for STEM Institute](http://create4stem.msu.edu/ \"the CREATE for STEM Institute\") at Michigan State University. To learn more, ",
    "[visit the Interactions curriculum collection](https://learn.concord.org/interactions \"visit the Interactions curriculum collection\") in ",
    "which this simulation is embedded.*"
    ],
  "theme": "",
  "showTopBar": true,
  "showBottomBar": true,
  "padding": 10,
  "models": [
    {
      "type": "md2d",
      "id": "deformedCloud$0",
      "url": "models/lab-version/1/md2d/interactions/forming-molecule.json",
      "onLoad": [
        "setElementProperties(0, {color: -16776961});",
        "//Add electrons",
        "var atoms = [getAtomProperties(0), getAtomProperties(1)],",
        "    maxElectrons = 2,",
        "    hasMoved = false,",
        "    instructionsColor = 255;",
        "for (var e = 0; e < maxElectrons; e++) {",
        "  addShape({",
        "    type: 'ellipse',",
        "    width: 0.03,",
        "    height: 0.03,",
        "    x: atoms[e].x,",
        "    y: atoms[e].y,",
        "    fence: 0,",
        "    color: 'rgb(255, 0, 0)',",
        "    lineColor: 'black',",
        "    lineDashes: 'none',",
        "    lineWeight: 0,",
        "    layer: 1,",
        "    layerPosition: 100,",
        "    visible: 1",
        "  });",
        "};",
        "function randomizeElectrons(){",
        "  var ellipse,",
        "      randomAngle,",
        "      randomDistance;",
        "  for (var e = 0; e < maxElectrons; e++) {",
        "    ellipse = getShapeProperties(e);",
        "    randomAngle = 2 * Math.PI * Math.random();",
        "    randomDistance = Math.sqrt(-2 * Math.log(Math.random()));",
        "    // Convert random angle and distance from polar",
        "    // to rectangular coordinates",
        "    setShapeProperties(getNumberOfShapes() - maxElectrons + e, {",
        "      x: ellipse.x + ellipse.width * (0.5 + 0.125 * randomDistance * Math.cos(randomAngle)),",
        "      y: ellipse.y + ellipse.height * (0.5 + 0.125 * randomDistance * Math.sin(randomAngle)),",
        "    })",
        "  }",
        "}",
        "function updateVisualization(){",
        "  atoms = [getAtomProperties(0), getAtomProperties(1)];",
        "  var distance  = atoms[1].x - atoms[0].x,",
        "      closeness = (2 - Math.min(distance,2)) / 2,",
        "      squeeze   = (closeness < 0.4) ? 0.7 * closeness : 0.28 - (0.7 * (closeness - 0.4)),",
        "      force     = atoms[0].ax,",
        "      displacement = squeeze * 1.3,",
        "      newWidth = 1.5 + squeeze,",
        "      newHeight = 1.5 - Math.abs(squeeze),",
        "      _pe = pe(),",
        "      forceText, forceTextX, forceTextY, fontSize, fontColor;",
        "  setShapeProperties(0, {",
        "    width: newWidth,",
        "    height: newHeight,",
        "    x: atoms[0].x - newWidth / 2 + displacement,",
        "    y: atoms[0].y - newHeight / 2",
        "  });",
        "  setShapeProperties(1, {",
        "    width: newWidth,",
        "    height: newHeight,",
        "    x: atoms[1].x - newWidth / 2 - displacement,",
        "    y: atoms[1].y - newHeight / 2",
        "  });",
        "  if (Math.abs(force) < 2.5e-6) force = 0;",
        "  if (force == 0 && distance > 1.66) force = 2e-6;",
        "  setAtomProperties(0, {vx: force});",
        "  setAtomProperties(1, {vx: -force});",
        "  forceText = force == 0 ? _pe > -1 ? 'Attractive' : 'Balanced' : force > 0 ? 'Attractive' : 'Repulsive';",
        "  fontSize  = Math.abs(force) < 0.0001 ? Math.min(0.14 + (((Math.abs(force) - 0.000015) / 0.0005)), 0.145) : Math.min(0.145 + (((Math.abs(force) - 0.00002) / 0.03)), 0.35);",
        "  forceTextX = 2.73 - (fontSize - 0.14)/0.14*0.09;",
        "  forceTextY = 0.7 + (fontSize - 0.14)/0.14*0.16;",
        "  fontColor = forceText == 'Balanced' ? 'rgb(0,255,0)':  'rgb(255,255,0)';",
        "  setTextBoxProperties(1, {text: forceText, fontSize: fontSize, x: forceTextX, y: forceTextY, color: fontColor});",
        "  if (hasMoved && instructionsColor) {",
        "    instructionsColor -= 15;",
        "    setTextBoxProperties(4, {color: 'rgb('+instructionsColor+','+instructionsColor+','+instructionsColor+')'});",
        "  }",
        "}",
        "setInterval(function(){",
        "  batch(randomizeElectrons);",
        "}, 200);",
        "onDrag('atom', function (x, y, d, i) {",
        "  var minX = i == 0 ? 0 : getAtomProperties(0).x + 0.16,",
        "      maxX = i == 1 ? 5 : getAtomProperties(1).x - 0.16,",
        "      newX = Math.max(Math.min(x, maxX), minX);",
        "  batch(function() {",
        "    setAtomProperties(i, {x: newX});",
        "    setAtomProperties(0, {y: 1.5374090707241856});",
        "    setAtomProperties(1, {y: 1.5374090707241856});",
        "    if (!hasMoved) { hasMoved = true; }",
        "    updateVisualization();",
        "  });",
        "});",
        "updateVisualization();"
      ],
      "viewOptions": {
        "controlButtons": "",
        "enableKeyboardHandlers": false
      }
    }
  ],
  "propertiesToRetain": [],
  "parameters": [],
  "outputs": [],
  "filteredOutputs": [],
  "helpTips": [],
  "dataSets": [],
  "components": [],
  "layout": {},
  "template": []
}
